unit GE_BLOCK_SG;

interface

uses
  GR32, Math;

type

  TMacroBlock=record
    p:array of array of PColor32;
    size:integer;
  end;

TBlockSegment=class
public

 Frame1,Frame2,OutputFrame:PBitmap32;
 BasePoint:TPoint;
 Done:boolean;

 constructor Create(Fr1,Fr2,Output:PBitmap32);
 destructor  Destroy; override;
 function  GetMacroBlock(Point:TPoint; size:integer):TMacroBlock;
 function  GetSAD(Block1,Block2:TMacroBlock):integer;
 procedure FillMacroBlock(block:TMacroBlock; color:TColor32);
 function  StepIsReal(Point:TPoint; BLOCK_SIZE:integer):boolean;
 procedure MainLoop;

end;

  procedure CA_Lava(pIn,pOut:PBitmap32);

implementation

constructor TBlockSegment.Create(Fr1,Fr2,Output:PBitmap32);
begin
  Frame1:=Fr1;
  Frame2:=Fr2;
  OutputFrame:=Output;
  Done:=false;
  MainLoop;
end;

procedure TBlockSegment.MainLoop;
begin
 // CA_Lava(Frame1,OutputFrame);
end;

procedure CA_Lava(pIn,pOut:PBitmap32);
var i,j,k,m:integer;
    Buffer:TBitmap32;
    pBuf,pTmp:PBitmap32;
    src,dst:array[0..2] of PColor32Array; //block
    bSurv, bBirth:array[0..8] of byte;
    Generations:integer;
    sum:integer;
begin
 Buffer:=TBitmap32.Create;
 Buffer.Assign(pOut^);
 pBuf:=@Buffer;
 //RULES LAVA SETUP
  FillChar(bSurv,8,0);
  FillChar(bBirth,8,0);
  for k:=1 to 5 do bSurv[k]:=1;
  for k:=4 to 8 do bBirth[k]:=1;
 Generations:=0;
 //MAIN LOOP
 while Generations<210 do
 begin
   for j:=0 to pIn.Height-8 do
   begin
     //беру указатели на 3 строки
     for k:=0 to 2 do
     begin
       src[k]:=@pOut^.Bits[(j+k)*pIn.Width];
       dst[k]:=@pBuf^.Bits[(j+k)*pIn.Width];
     end;
     //двигаю блок по строке []--->[]
     for i:=0 to pIn.Width-6 do
     begin
       sum:=0;
       //обход клеток блока [<^>]
       for k:=0 to 2 do
       for m:=0 to 2 do
       begin
         //подсчет соседей (бинариз.)
         if (k=1) and (m=1) then continue; //искл.
         //sum:=sum+(src[k][i+m] and 255);
         if (src[k][i+m] and 255)>40 then inc(sum);
       end;
       //выживает
       if (src[1][i+1] and 255)>40 then
         if (sum=0) or (sum>5) then dst[1][i+1]:=clBlack32
         else dst[1][i+1]:=src[1][i+1]
       //рождается
       else
         if (sum>=4) or (sum<=8) then dst[1][i+1]:=clWhite32
         else dst[1][i+1]:=src[1][i+1]
     end;
   end;
   inc(Generations);
   pTmp:=pBuf;
   pBuf:=pOut;
   pOut:=pTmp;
   end;
end;

destructor TBlockSegment.Destroy;
begin
end;

function  TBlockSegment.StepIsReal(Point:TPoint;BLOCK_SIZE:integer):boolean;
begin
  if ((Point.X+BLOCK_SIZE)<Frame1.Width) and ((Point.Y+BLOCK_SIZE)<Frame1.Height)  then
     if ((Point.X-BLOCK_SIZE)>BLOCK_SIZE) and ((Point.Y-BLOCK_SIZE)>BLOCK_SIZE) then
       result:=true
     else result:=false
  else result:=false;
end;

procedure TBlockSegment.FillMacroBlock(block:TMacroBlock; color:TColor32);
var i,j:integer; sw:boolean;
begin
  for i:=0 to block.size-1 do
  for j:=0 to block.size-1 do
      block.p[i,j]^:=color;
end;

function TBlockSegment.GetMacroBlock(point:TPoint; size:integer):TMacroBlock;
var i,j:integer;
begin
  for i:=0 to size-1 do
  for j:=0 to size-1 do
    result.p[i,j]:=Frame1.PixelPtr[Point.X-(size div 2)+i,Point.Y-(size div 2)+j];
end;

function TBlockSegment.GetSAD(Block1,Block2:TMacroBlock):integer;
var i,j:integer; size_min:integer;
begin
 result:=0;
  size_min:=Min(Block1.size,Block2.size);
  for i:=0 to size_min-1 do
  for j:=0 to size_min-1 do
    result:=result+abs((Block1.p[i,j]^ and 255)-(Block2.p[i,j]^and 255));
end;

end.



